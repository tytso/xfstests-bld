#!/bin/bash

XFSTESTS_FLAVOR=kvm
t=$(echo ${XFSTESTS_FLAVOR}_xfstests_dir | tr "[:lower:]" "[:upper:]")
eval DIR="\$$t"
if test -z "$DIR"
then
    t="$(dirname "$(dirname "$0")")/lib/xfstests-appliance"
    if test -d "$t"
    then
	DIR="$t"
    fi
fi
if test -z "$DIR"
then
    DIR=$(pwd)
fi
if test ! -f "$DIR/util/get-config"
then
    echo "$(basename "$0"): couldn't find $DIR/util/get-config"
    exit 1
fi

. "$DIR/util/get-config"

QUIET="quiet loglevel=0"

. $DIR/util/parse_cli

if ! test -f "$KERNEL"; then
     echo "$KERNEL: kernel not found"
     exit 1
fi

if test -z "$DO_NET" ; then
   echo "Networking disabled."
   NET="-net none "
elif test $(whoami) = "root" ; then
  NET="-net nic,model=virtio -net tap,script=$IFUP,downscript=$IFDOWN "
else
  NET="-netdev user,id=mynet0,net=172.20.0.0/24 -device virtio-net,netdev=mynet0 "
fi

EXTRA_ARG=$(echo "$EXTRA_ARG" | sed -e 's/:/ /')

DATE=$(date +%Y%m%d%H%M)
if test -n "$SKIP_LOG" ; then
    LOGFILE=/tmp/log.$DATE
else
    mkdir -p "$DIR/logs"
    LOGFILE="$DIR/logs/log.$DATE"
    RESULTFILE="$DIR/logs/resutls-$DATE.tar.xz"
fi

if test -n "$INITRD" ; then
    INITRD="--initrd $INITRD"
fi

if ! test -e $VDB -a -e $VDC -a -e $VDD -a -e $VDE -a -e $VDF -a -e $VDG
then
	echo "Test disks don't exist, running setup..."
	$DIR/setup
fi

for i in "$VDB" "$VDC" "$VDD" "$VDE" "$VDF" "$VDG"
do
    if ! test -e "$i"
    then
	echo "Fatal error: disk $i does not exit.  Config error?"
	exit 1;
    fi
done

if ionice -h > /dev/null ; then
    IONICE="ionice -n 5"
fi

if test -z "$VIRTFS_PATH"; then
    VIRTFS_PATH=/tmp/kvm-xfstests-$USER
fi

VDH=$(mktemp /tmp/kvm-upload.XXXXXXXX)
trap 'rm -f "$VDH"' 0
tar -c -f "$VDH" -T /dev/null

if test -z "$NO_ACTION" -a "$UPDATE_XFSTESTS" = "yes"
then
    tar -r -f $VDH -C "$DIR/.." xfstests.tar.gz
fi

if test -z "$NO_ACTION" -a "$UPDATE_FILES" = "yes"
then
    TDIR=$(mktemp -d /tmp/files.XXXXXXXX)
    if test -z "$TDIR"; then
	echo "Couldn't create temp directory"
	exit 1
    fi
    (cd "$DIR/test-appliance"; \
     tar -X kvm-exclude-files -C files \
		--owner=root --group=root --mode=go+u-w -cf - . | \
	 gzip -9n > "$TDIR/files.tar.gz")
    tar -r -f $VDH -C "$TDIR" files.tar.gz
    rm -rf "$TDIR"
fi

chmod 400 "$VDH"

mkdir -p /tmp/kvm-xfstests-$USER

$NO_ACTION $IONICE $QEMU -boot order=c $NET \
	-machine type=pc,accel=kvm:tcg \
	-drive file=$ROOT_FS,if=virtio$SNAPSHOT \
	-drive file=$VDB,cache=$CACHE,if=virtio,format=raw$AIO \
	-drive file=$VDC,cache=$CACHE,if=virtio,format=raw$AIO \
	-drive file=$VDD,cache=$CACHE,if=virtio,format=raw$AIO \
	-drive file=$VDE,cache=$CACHE,if=virtio,format=raw$AIO \
	-drive file=$VDF,cache=$CACHE,if=virtio,format=raw$AIO \
	-drive file=$VDG,cache=none,if=virtio,format=raw$AIO \
	-drive file=$VDH,cache=unsafe,readonly,if=virtio \
	-vga none -nographic -smp $NR_CPU -m $MEM \
	-fsdev local,id=v_tmp,path=$VIRTFS_PATH,security_model=none \
	-device virtio-9p-pci,fsdev=v_tmp,mount_tag=v_tmp \
	$VIRTIO_RNG \
	$CONSOLE \
	$MONITOR \
	$SERIAL \
	$GDB \
	$NUMA \
	--kernel $KERNEL \
	$INITRD \
	--append "$QUIET root=$ROOT_DEV console=ttyS0,115200 $ARG $EXTRA_ARG" |\
tee $LOGFILE

$DIR/get-results $LOGFILE
if test -n "$DO_ARCHIVE"; then
    debugfs -R "dump /results.tar.xz $RESULTFILE" $VDG
    echo "result  in $RESULTFILE"
fi
if test -n "$SKIP_LOG" ; then
  rm $LOGFILE
else
  echo "logfile in $LOGFILE"
fi
